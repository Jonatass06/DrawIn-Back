// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(uuid())
  name           String
  draws          Draw[]          @relation(name: "UserDraws")
  courses        Course[]        @relation(name: "UserCourses")
  subscriptions  Course[]        @relation(name: "UserSubscriptions")
  likedDraws     Draw[]          @relation(name: "UserLikedDraws")
  userSugestions SugestionUser[] @relation(name: "UserSugestions")
  isAdvancedUser Boolean
}

model File {
  id              String            @id @default(uuid())
  name            String
  type            String
  data            Bytes
  date            DateTime
  ActivityAnnex   ActivityAnnex[]
  CourseMaterials CourseMaterials[]
  CourseClasses   CourseClasses[]
  Draw            Draw[]
  Activity        Activity[]
}

model ActivityAnnex {
  id         String   @id @default(uuid())
  file       File     @relation(fields: [fileId], references: [id])
  activity   Activity @relation(name: "ActivityAnnex", fields: [activityId], references: [id])
  fileId     String
  activityId String
}

model CourseMaterials {
  id       String @id @default(uuid())
  file     File   @relation(fields: [fileId], references: [id])
  course   Course @relation(name: "CourseMaterials", fields: [courseId], references: [id])
  fileId   String
  courseId String
}

model CourseClasses {
  id       String @id @default(uuid())
  file     File   @relation(fields: [fileId], references: [id])
  course   Course @relation(name: "CourseClasses", fields: [courseId], references: [id])
  fileId   String
  courseId String
}

model Draw {
  id       String   @id @default(uuid())
  likedBy  User[]   @relation(name: "UserLikedDraws")
  name     String
  sizeX    Int
  sizeY    Int
  date     DateTime
  theme    String
  author   User     @relation(name: "UserDraws", fields: [userId], references: [id])
  genre    String
  pic      File     @relation(fields: [fileId], references: [id])
  reported Boolean
  userId   String
  fileId   String
}

model Tip {
  id       String @id @default(uuid())
  category String
  value    String
}

model SugestionUser {
  id          String    @id @default(uuid())
  sugestion   Sugestion @relation(fields: [sugestionId], references: [id])
  user        User      @relation(name: "UserSugestions", fields: [userId], references: [id])
  status      String
  sugestionId String
  userId      String
}

model Sugestion {
  id            String          @id @default(uuid())
  value         String
  reported      Boolean
  SugestionUser SugestionUser[]
}

model Activity {
  id          String          @id @default(uuid())
  name        String
  description String
  annex       ActivityAnnex[] @relation(name: "ActivityAnnex")
  course      Course          @relation(name: "CourseActivities", fields: [courseId], references: [id])
  sclass      File            @relation(fields: [fileId], references: [id])
  courseId    String
  fileId      String
}

model Course {
  id          String            @id @default(uuid())
  name        String
  description String
  date        DateTime
  workload    Int
  audience    String
  teacher     User              @relation(name: "UserCourses", fields: [userId], references: [id])
  materials   CourseMaterials[] @relation(name: "CourseMaterials")
  classes     CourseClasses[]   @relation(name: "CourseClasses")
  students    User[]            @relation(name: "UserSubscriptions")
  activities  Activity[]        @relation(name: "CourseActivities")
  reported    Boolean
  userId      String
}

// enum SugestionStatus {
//   ACCEPT
//   DENY
//   WAITING
// }

// enum TipType {
//   PERSPECTIVE
//   SHAPES
//   ANATHOMY
//   COLOR
//   LIGHTANDSHADOW
//   OTHER
// }
//  enum Audience {
//   BEGINNER 
//   INTERMEDIATE 
//   ADVANCED 
//   ALL 
// }
